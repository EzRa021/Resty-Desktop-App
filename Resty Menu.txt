# Restaurant Management System - Technical Specification

## 1. Project Overview
This document outlines the technical requirements for a comprehensive restaurant management application built on Electron, Next.js, and Node.js. The system provides integrated inventory management, point of sale (POS) operations, and menu management with offline capabilities.

### 1.1 Technology Stack
- **Frontend**: Next.js within Electron for desktop application
- **Backend**: Node.js fastify
- **Database**: 
  - PouchDB for local storage and offline functionality
  - CouchDB for centralized data storage and synchronization
- **Real-time Communication**: Socket.IO for push notifications

### 1.2 Key Objectives
- Provide seamless offline and online operation
- Ensure real-time inventory tracking tied to menu items
- Support efficient POS transactions with inventory integration
- Implement comprehensive menu and recipe management
- Maintain data integrity across distributed installations

## 2. Database Schema Specification

### 2.1 Menu Items Collection
```json
{
  "_id": "uuid-string",
  "type": "menuItem",
  "name": "String (unique, required)",
  "description": "String",
  "price": {
    "regular": "Number (required)",
    "large": "Number (optional)",
    "special": "Number (optional)"
  },
  "category": "String (required, indexed)",
  "availability": {
    "isAvailable": "Boolean (default: true)",
    "customHours": [
      {
        "dayOfWeek": "Number (0-6)",
        "startTime": "String (HH:MM)",
        "endTime": "String (HH:MM)"
      }
    ]
  },
  "ingredients": [
    {
      "ingredientId": "String (reference to Ingredient._id)",
      "quantity": "Number",
      "unit": "String"
    }
  ],
  "imageUrl": "String",
  "allergens": ["String"],
  "nutritionalInfo": {
    "calories": "Number",
    "protein": "Number (g)",
    "carbs": "Number (g)",
    "fat": "Number (g)",
    "fiber": "Number (g)"
  },
  "tags": ["String"],
  "isActive": "Boolean (default: true)",
  "createdAt": "ISO Date String",
  "updatedAt": "ISO Date String"
}
```

### 2.2 Inventory Ingredients Collection
```json
{
  "_id": "uuid-string",
  "type": "ingredient",
  "name": "String (unique, required)",
  "unit": "String (required, e.g., 'kg', 'L')",
  "stockLevel": "Number (required)",
  "minimumThreshold": "Number (required)",
  "cost": "Number (cost per unit)",
  "supplierInfo": {
    "name": "String",
    "contactPerson": "String",
    "email": "String",
    "phone": "String",
    "leadTime": "Number (days)"
  },
  "batchInfo": [
    {
      "batchId": "String",
      "quantity": "Number",
      "expiryDate": "ISO Date String",
      "receivedDate": "ISO Date String"
    }
  ],
  "location": "String (storage location)",
  "category": "String",
  "isActive": "Boolean (default: true)",
  "createdAt": "ISO Date String",
  "updatedAt": "ISO Date String"
}
```

### 2.3 Recipes Collection
```json
{
  "_id": "uuid-string",
  "type": "recipe",
  "name": "String (required)",
  "restaurantId":"string(required)",
  "branchId":"string(required)"
  "menuItemId": "String (reference to MenuItem._id)",
  "version": "Number (default: 1)",
  "ingredients": [
    {
      "ingredientId": "String (reference to Ingredient._id)",
      "quantity": "Number (required)",
      "unit": "String (required)",
      "preparationNotes": "String"
    }
  ],
  "preparationInstructions": "String",
  "preparationTime": "Number (minutes)",
  "yield": "Number (servings)",
  "costPerServing": "Number (calculated)",
  "isActive": "Boolean (default: true)",
  "createdAt": "ISO Date String",
  "updatedAt": "ISO Date String"
}
```

### 2.4 POS Transactions Collection
```json
{
  "_id": "uuid-string",
"restaurantId":"string(required)",
  "branchId":"string(required)",
  "type": "transaction",
  "orderNumber": "String (generated, unique per day)",
  "orderItems": [
    {
      "menuItemId": "String (reference to MenuItem._id)",
      "name": "String (denormalized for historical accuracy)",
      "quantity": "Number",
      "unitPrice": "Number",
      "modifiers": [
        {
          "name": "String",
          "price": "Number"
        }
      ],
      "subtotal": "Number"
    }
  ],
  "subtotal": "Number",
  "tax": "Number",
  "discount": {
    "type": "String (percentage, fixed)",
    "value": "Number",
    "reason": "String"
  },
  "serviceCharge": "Number",
  "totalAmount": "Number",
  "paymentStatus": "String (enum: 'Pending', 'Completed', 'Failed', 'Refunded')",
  "paymentMethod": "String (enum: 'Cash', 'Card', 'Mobile', 'Split')",
  "paymentDetails": {
    "cardType": "String",
    "last4Digits": "String",
    "authorizationCode": "String"
  },
  "customerInfo": {
    "name": "String",
    "phone": "String",
    "email": "String",
    "address": "String"
  },
  "tableNumber": "Number",
  "serverName": "String",
  "orderType": "String (enum: 'Dine-in', 'Takeout', 'Delivery')",
  "notes": "String",
  "createdAt": "ISO Date String",
  "updatedAt": "ISO Date String"
}
```

### 2.5 Inventory Transactions Collection
```json
{
  "_id": "uuid-string",
  "type": "inventoryTransaction",
  "restaurantId":"string(required)",
  "branchId":"string(required)",
  "transactionType": "String (enum: 'Add', 'Deduct', 'Spoilage', 'Adjustment')",
  "ingredientId": "String (reference to Ingredient._id)",
  "ingredientName": "String (denormalized)",
  "quantity": "Number (positive for additions, negative for deductions)",
  "unit": "String",
  "batchId": "String (optional)",
  "expiryDate": "ISO Date String (optional)",
  "reason": "String",
  "relatedDocumentId": "String (e.g., order ID, purchase order ID)",
  "relatedDocumentType": "String (e.g., 'Order', 'PurchaseOrder')",
  "cost": "Number (unit cost Ã— quantity)",
  "userId": "String",
  "userName": "String (denormalized)",
  "createdAt": "ISO Date String"
}
```

### 2.6 Users Collection
```json
{
  "_id": "uuid-string",
  "type": "user",
  "username": "String (unique, required)",
  "passwordHash": "String (bcrypt hashed, never synced to PouchDB)",
  "role": "String (enum: 'Admin', 'Manager', 'Cashier', 'Kitchen')",
  "firstName": "String",
  "lastName": "String",
  "email": "String",
  "phone": "String",
  "isActive": "Boolean (default: true)",
  "lastLogin": "ISO Date String",
  "permissions": ["String"],
  "createdAt": "ISO Date String",
  "updatedAt": "ISO Date String"
}
```

## 3. Core Backend Features

### 3.1 Menu Management

#### 3.1.1 CRUD Endpoints

**Create Menu Item**
- **Endpoint**: `POST /api/menu`
- **Authentication**: Required(if the session id is in the sessionDB)

- **Request Body**:
  ```json
  {
    "name": "String (required)",
    "description": "String",
    "restaurantId":"string(required)",
    "branchId":"string(required)"
    "price": {
      "regular": "Number (required)",
      "large": "Number (optional)"
    },
    "category": "String (required)",
    "availability": {...},
    "ingredients": [...],
    "imageUrl": "String",
    "allergens": ["String"],
    "nutritionalInfo": {...},
    "tags": ["String"]
  }
  ```
- **Response**: 201 Created with created menu item object
- **Business Logic**:
  - Validate unique name
  - Check if all ingredients exist
  - Generate unique ID
  - Set createdAt/updatedAt timestamps
  - Sync to PouchDB

**List Menu Items**
- **Endpoint**: `GET /api/menu`
- **Authentication**:Required(if in the session id is in the sessionDB)

- **Query Parameters**:
  - `page`: Number (default: 1)
  - `limit`: Number (default: 20)
  - `category`: String
  - `available`: Boolean
  - `search`: String
  - `sort`: String (default: "name")
  - `order`: String (default: "asc")
- **Response**: 200 OK with paginated menu items and metadata
- **Business Logic**:
  - Apply filters based on query parameters
  - Return total count for pagination

**Get Single Menu Item**
- **Endpoint**: `GET /api/menu/:id`
- **Authentication**: Required
- **Response**: 200 OK with menu item object or 404 Not Found
- **Business Logic**:
  - Validate item exists
  - Include related recipe if requested

**Update Menu Item**
- **Endpoint**: `PUT /api/menu/:id`
- **Authentication**: Required (if in the session id is in the sessionDB)

- **Request Body**: Partial menu item object
- **Response**: 200 OK with updated menu item
- **Business Logic**:
  - Validate item exists
  - Support partial updates
  - Update updatedAt timestamp
  - Sync changes to PouchDB

**Delete/Archive Menu Item**
- **Endpoint**: `DELETE /api/menu/:id`
- **Authentication**: Required (Admin)
- **Response**: 204 No Content
- **Business Logic**:
  - Soft delete by setting isActive: false
  - Prevent deletion if part of active orders
  - Sync changes to PouchDB

#### 3.1.2 Category Management

**Create Category**
- **Endpoint**: `POST /api/menu/categories`
- **Authentication**: Required(if in the session id is in the sessionDB)
- **Request Body**:
  ```json
  {
    "name": "String (required)",
    "description": "String",
    "displayOrder": "Number"
    "restaurantId":"string(required)",
    "branchId":"string(required)"
  }
  ```
- **Response**: 201 Created with category object

**List Categories**
- **Endpoint**: `GET /api/menu/categories`
- **Authentication**: Required
- **Response**: 200 OK with array of categories

#### 3.1.3 Daily Specials Management

**Set Daily Specials**
- **Endpoint**: `POST /api/menu/specials`
- **Authentication**: Required (Admin, Manager)
- **Request Body**:
  ```json
  {
    "menuItemId": "String (required)",
    "restaurantId":"string(required)",
  "branchId":"string(required)",
    "specialPrice": "Number",
    "startDate": "ISO Date String",
    "endDate": "ISO Date String",
    "daysOfWeek": [0-6],
    "description": "String"
  }
  ```
- **Response**: 201 Created with special object

**Get Current Specials**
- **Endpoint**: `GET /api/menu/specials`
- **Query Parameters**:
  - `date`: ISO Date String (default: today)
- **Response**: 200 OK with array of special menu items
- **Business Logic**:
  - Filter specials valid for the specific date
  - Include full menu item details

### 3.2 Inventory Management

#### 3.2.1 CRUD Endpoints

**Add Ingredient**
- **Endpoint**: `POST /api/inventory`
- **Authentication**: Required (Admin, Manager)
- **Request Body**: Ingredient object
- **Response**: 201 Created with ingredient object
- **Business Logic**:
  - Validate unique name
  - Generate unique ID
  - Set createdAt/updatedAt timestamps
  - Sync to PouchDB

**List Ingredients**
- **Endpoint**: `GET /api/inventory`
- **Authentication**: Required
- **Query Parameters**:
  - `page`: Number (default: 1)
  - `limit`: Number (default: 50)
  - `search`: String
  - `category`: String
  - `lowStock`: Boolean
  - `sort`: String (default: "name")
- **Response**: 200 OK with paginated ingredients
- **Business Logic**:
  - Flag low-stock items
  - Calculate days until reorder needed

**Update Ingredient**
- **Endpoint**: `PUT /api/inventory/:id`
- **Authentication**: Required (Admin, Manager)
- **Request Body**: Partial ingredient object
- **Response**: 200 OK with updated ingredient
- **Business Logic**:
  - Update updatedAt timestamp
  - Record modification history
  - Sync changes to PouchDB

**Delete Ingredient**
- **Endpoint**: `DELETE /api/inventory/:id`
- **Authentication**: Required (Admin)
- **Response**: 204 No Content
- **Business Logic**:
  - Prevent deletion if linked to active recipes
  - Soft delete by setting isActive: false
  - Sync changes to PouchDB

#### 3.2.2 Stock Management

**Deduct Stock**
- **Endpoint**: `POST /api/inventory/deduct`
- **Authentication**: Required (POS System)
- **Request Body**:
  ```json
  {     "restaurantId":"string(required)",
        "branchId":"string(required)"
    "deductions": [
      {
        
        "ingredientId": "String",
        "quantity": "Number",
        "reason": "String",
        "relatedDocumentId": "String"
      }
    ]
  }
  ```
- **Response**: 200 OK with updated stock levels
- **Business Logic**:
  - Atomic batch operation
  - Create inventory transactions
  - Update ingredient stockLevel
  - Flag if any item falls below threshold
  - Real-time alert if critical ingredients below threshold

**Replenish Stock**
- **Endpoint**: `POST /api/inventory/replenish`
- **Request Body**:
  ```json
  {
    "restaurantId":"string(required)",
    "branchId":"string(required)"
    "additions": [
      {
        "ingredientId": "String",
        "quantity": "Number",
        "cost": "Number",
        "batchId": "String",
        "expiryDate": "ISO Date String"
      }
    ]
  }
  ```
- **Response**: 200 OK with updated stock levels
- **Business Logic**:
  - Create inventory transactions
  - Update ingredient stockLevel
  - Track batch information for expiry monitoring

**Generate Purchase Orders**
- **Endpoint**: `GET /api/inventory/purchase-orders`
- **Authentication**:  Required(if in the session id is in the sessionDB)

- **Query Parameters**:
  - `supplierId`: String (optional)
  - `threshold`: Number (default: 0 for all below minimumThreshold)
- **Response**: 200 OK with purchase order suggestions
- **Business Logic**:
  - Group by supplier
  - Calculate quantities needed to reach optimal levels
  - Include cost estimates
  - Consider supplier lead times

#### 3.2.3 Waste Tracking

**Log Waste**
- **Endpoint**: `POST /api/inventory/waste`
- **Authentication**: Required (Admin, Manager, Kitchen)
- **Request Body**:
  ```json
  {
    "restaurantId":"string(required)",
    "branchId":"string(required)"
    "ingredientId": "String",
    "quantity": "Number",
    "reason": "String (enum: 'Expired', 'Spoiled', 'Preparation Error', 'Other')",
    "notes": "String"
  }
  ```
- **Response**: 200 OK with updated stock level
- **Business Logic**:
  - Create negative inventory transaction
  - Update ingredient stockLevel
  - Track waste metrics for analysis

**Waste Report**
- **Endpoint**: `GET /api/inventory/waste-report`
- **Authentication**: Required(if in the session id is in the sessionDB)

- **Query Parameters**:
  - `startDate`: ISO Date String
  - `endDate`: ISO Date String
  - `ingredientId`: String (optional)
  - `reason`: String (optional)
- **Response**: 200 OK with waste metrics
- **Business Logic**:
  - Calculate waste by ingredient, reason
  - Provide cost impact analysis

### 3.3 Recipe Management

#### 3.3.1 CRUD Endpoints

**Create Recipe**
- **Endpoint**: `POST /api/recipes`
- **Authentication**:Required(if in the session id is in the sessionDB)

- **Request Body**: Recipe object
- **Response**: 201 Created with recipe object
- **Business Logic**:
  - Validate ingredient IDs exist
  - Calculate cost per serving
  - Link to menu item

**List Recipes**
- **Endpoint**: `GET /api/recipes`
- **Authentication**: Required
- **Query Parameters**:
  - `page`: Number (default: 1)
  - `limit`: Number (default: 20)
  - `menuItemId`: String
  - `search`: String
- **Response**: 200 OK with paginated recipes

**Get Single Recipe**
- **Endpoint**: `GET /api/recipes/:id`
- **Authentication**: Required
- **Response**: 200 OK with recipe object or 404 Not Found

**Update Recipe**
- **Endpoint**: `PUT /api/recipes/:id`
- **Authentication**:  Required(if in the session id is in the sessionDB)

- **Request Body**: Partial recipe object
- **Response**: 200 OK with updated recipe
- **Business Logic**:
  - Increment version number
  - Recalculate cost per serving
  - Archive previous version

**Delete Recipe**
- **Endpoint**: `DELETE /api/recipes/:id`
- **Authentication**: Required(if in the session id is in the sessionDB)

- **Response**: 204 No Content
- **Business Logic**:
  - Prevent deletion if active orders exist
  - Create archived version

#### 3.3.2 Inventory Integration

**Check Recipe Availability**
- **Endpoint**: `POST /api/recipes/check-availability`
- **Authentication**: Required
- **Request Body**:
  ```json
  {
    "recipeId": "String",
    "quantity": "Number (default: 1)"
    "restaurantId":"string(required)",
    "branchId":"string(required)"
  }
  ```
- **Response**: 200 OK with availability status
- **Business Logic**:
  - Calculate required ingredients
  - Check current stock levels
  - Return availability status with potential shortages

**Batch Production Planning**
- **Endpoint**: `POST /api/recipes/production-plan`
- **Authentication**: Required(if in the session id is in the sessionDB)

- **Request Body**:
  ```json
  {
     "restaurantId":"string(required)",
      "branchId":"string(required)"
    "recipes": [
      {
        "recipeId": "String",
        "quantity": "Number"
      }
    ]
  }
  ```
- **Response**: 200 OK with ingredients needed and availability
- **Business Logic**:
  - Aggregate ingredients across recipes
  - Check stock availability
  - Generate shopping list for missing items

### 3.4 Point of Sale (POS)

#### 3.4.1 Order Management

**Create Order**
- **Endpoint**: `POST /api/pos/orders`
- **Authentication**: Required (Cashier, Manager, Admin)
- **Request Body**:
  ```json
  {
   "restaurantId":"string(required)",
        "branchId":"string(required)"
    "orderItems": [
      {
        "menuItemId": "String",
        "quantity": "Number",
        "modifiers": [...]
      }
    ],
    "tableNumber": "Number",
    "serverName": "String",
    "customerInfo": {...},
    "orderType": "String",
    "notes": "String"
  }
  ```
- **Response**: 201 Created with order object
- **Business Logic**:
  - Generate order number
  - Calculate subtotal, tax, total
  - Validate menu items exist and are available
  - Check inventory availability
  - Initiate inventory deduction
  - Create pending transaction

**List Orders**
- **Endpoint**: `GET /api/pos/orders`
- **Authentication**:Required(if in the session id is in the sessionDB)

- **Query Parameters**:
  - `page`: Number (default: 1)
  - `limit`: Number (default: 20)
  - `startDate`: ISO Date String
  - `endDate`: ISO Date String
  - `status`: String
  - `orderType`: String
- **Response**: 200 OK with paginated orders

**Update Order**
- **Endpoint**: `PUT /api/pos/orders/:id`
- **Authentication**: Required(if in the session id is in the sessionDB)

- **Request Body**: Partial order object
- **Response**: 200 OK with updated order
- **Business Logic**:
  - Recalculate totals if items changed
  - Adjust inventory accordingly
  - Log modifications

**Cancel Order**
- **Endpoint**: `POST /api/pos/orders/:id/cancel`
- **Authentication**: Required(if in the session id is in the sessionDB)

- **Request Body**:
  ```json
  {
    "reason": "String"
  }
  ```
- **Response**: 200 OK with updated order
- **Business Logic**:
  - Mark as cancelled
  - Reverse inventory deductions
  - Log cancellation reason

#### 3.4.2 Payment Processing

**Process Payment**
- **Endpoint**: `POST /api/pos/payments`
- **Authentication**: Required(if in the session id is in the sessionDB)

- **Request Body**:
  ```json
  {
    "orderId": "String",
    "paymentMethod": "String",
    "paymentDetails": {...},
    "amount": "Number"a
  }
  ```
- **Response**: 200 OK with updated transaction
- **Business Logic**:
  - Support split payments
  - Update transaction status
  - Generate receipt
  - Handle change calculation for cash

**Refund Payment**
- **Endpoint**: `POST /api/pos/payments/:id/refund`
- **Authentication**: Required(if in the session id is in the sessionDB)

- **Request Body**:
  ```json
  {
    "amount": "Number",
    "reason": "String"
  }
  ```
- **Response**: 200 OK with refund details
- **Business Logic**:
  - Create refund record
  - Link to original transaction
  - Support partial refunds

#### 3.4.3 Real-Time Updates

**WebSocket Events**
- Connect: `socket.io/pos`
- Events:
  - `new-order`: Broadcast when new order is created
  - `order-updated`: Broadcast when order status changes
  - `payment-processed`: Broadcast when payment is processed
  - `inventory-alert`: Broadcast when item falls below threshold

### 3.5 Offline Sync

#### 3.5.1 PouchDB-CouchDB Sync Implementation

**Sync Configuration**
- Bidirectional sync between PouchDB and CouchDB
- Conflict resolution strategy: "Last write wins"
- Retry mechanism for failed syncs
- Prioritization for critical data (transactions, inventory)

**Sync Status Endpoint**
- **Endpoint**: `GET /api/sync/status`
- **Authentication**: Required(if in the session id is in the sessionDB)

- **Response**: 200 OK with sync statistics
  ```json
  {
    "lastSuccessfulSync": "ISO Date String",
    "pendingChanges": "Number",
    "syncInProgress": "Boolean",
    "offlineMode": "Boolean",
    "errorCount": "Number"
  }
  ```

**Manual Sync Trigger**
- **Endpoint**: `POST /api/sync/trigger`
- **Authentication**: Required(if in the session id is in the sessionDB)

- **Response**: 202 Accepted with sync job ID

#### 3.5.2 Offline Strategy

**Data Prioritization**
- Essential data cached for offline use:
  - Menu items, categories
  - Current inventory levels
  - Recent transactions

## 4. Security and Data Integrity



### 4.2 Data Validation

**Input Validation**
- Schema validation for all API endpoints
- Sanitization of user inputs
- Type checking and constraint validation

**Business Rule Validation**
- Inventory cannot go negative
- Menu prices must be positive
- Orders require at least one item

### 4.3 Audit Trail

**Logging Strategy**
- Transaction logs for all operations
- User action tracking
- System event logging
- Error and exception tracking

## 5. Example Scenarios

### 5.1 Menu Creation Workflow
1. Admin adds a "Pepper Soup" item with price $8
2. System validates the item name is unique
3. System creates the item with a new UUID
4. Item syncs to PouchDB for offline access
5. When online, item syncs to CouchDB
6. UI updates to show the new menu item

### 5.2 Inventory Deduction Workflow
1. Customer orders 3 servings of Jollof Rice
2. System checks recipe for Jollof Rice
3. System calculates required ingredients (3 kg rice, 0.6 L tomato paste)
4. System verifies sufficient inventory
5. Transaction created, inventory deducted
6. If stock falls below threshold, notification triggered
7. Changes sync to PouchDB immediately

### 5.3 POS Transaction Workflow
1. Staff member enters order items
2. System calculates total ($20)
3. Staff processes payment via cash
4. Receipt generated
5. Inventory updated in real-time
6. Kitchen notified via WebSocket
7. Transaction saved to local and remote database


### 6.3 Scalability
- Support for multiple restaurant locations
- Data partitioning by location
- Bulk import/export functionality

### 6.4 Maintainability
- Comprehensive error logging
- Modular architecture for easy updates
- Configuration-driven behavior where appropriate